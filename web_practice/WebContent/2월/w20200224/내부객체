+ 내부객체★★
 : 개발자가 객체를 생성하지 않아도 jsp 페이지가 서블릿 컨테이너(tomcat)로 로딩되면 서블릿 컨테이너가 자동으로 생성하는 객체.
 => 개발자는 반복적인 작업을 줄이고 필요한 작업만 수행 할 수 있게 된다
 
 : jsp 페이지는 web 서버 및 servlet container라고 하는 복잡한 환경에서 실행이 되기 때문에
   실행 중에 여러가지 상태 정보를 가지고 있어야 함 => 이런 경우 사용되는 객체들이 내부 객체
 
 : 내부 객체로 인해 개발자는 조금 더 쉽고 빠르게 JSP 프로그래밍이 가능함
 
1. request 내부 객체
 : javax.servlet.http.HttpServletRequest Interface를 tomcat이 구현한 객체, 자동화된 객체
 => 개발자는 사용만 하면 됨
 
 : <form>에서 입력되면 브라우저가 전송한 데이터를 Tomcat 등 서버의 JSP에서 처리할 수 있도록 객체로 가져오는 역할
 
 : 접속한 클라이언트에 대한 정보도 알 수 있음
 
2. response 내부 객체
 : javax.servlet.http.HttpServletResponse InterFace를 Tomcat이 구현한 객체
 : 처리 결과를 클라이언트(웹 브라우저)에게 출력할 목적을 가지고 있음
 : out 객체는 response 객체로부터 생성함
 : sendRedirect() : 데이터 처리를 한 후 특정 페이지로 자동으로 주소 이동
 
3. out 내부 객체
 : javax.servlet.jsp.JspWriter Class 객체
 : out 객체는 response 객체로부터 생성된다.
   - out.print : 데이터가 모두 한줄로 생성, 소스 분석 어려움
   - out.println : 호출될 때마다 새로운 데이터를 생성하고 새로운 라인으로 이동
   
   - System.out.print(), System.out.println()
   	=> 디버깅 정보를 콘솔에 출력하는 용도로 사용
   	 (변수의 변화를 추적, 관리하기 위한 용도, 에러 수정 목적)
   
4. application 내부 객체
 : javax.servlet.ServletContext Interface
 : 서블릿이 서블릿 컨테이너에서 실행될 때 환경정보를 저장
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   